# -*- coding: utf-8 -*-
#DO NOT EDIT THIS FILE
#This file was automatically generated by Natron PyPlug exporter version 2.

#Hand-written code should be added in a separate file named Shaker_NPGExt.py
#See http://natron.readthedocs.org/en/workshop/groups.html#adding-hand-written-code-callbacks-etc
#Note that Viewers are never exported

import NatronEngine
import sys

#Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from Shaker_NPGExt import *
except ImportError:
    pass

def getPluginID():
    return "Shaker-NPG-V1"

def getLabel():
    return "Shaker_NPG"

def getVersion():
    return 1

def getIconPath():
    return "Shaker_NPG.png"

def getGrouping():
    return "NPG"

def getDescription():
    return "Camera Shake Simulator"

def createInstance(app,group):

    #Create all nodes in the group
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(748, 190)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.699992, 0.699992)
    groupOutput1 = lastNode

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(741, 37)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.300008, 0.500008, 0.2)
    groupInput1 = lastNode

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setValue("RGBA")
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode



    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform_NPG")
    lastNode.setPosition(745, 111)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.699992, 0.300008, 0.100008)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(775, 1, 0)
        param.setValueAtTime(-21, 7, 0)
        param.setValueAtTime(0, 11, 0)
        param.setValueAtTime(0, 14, 0)
        param.setValueAtTime(0, 20, 0)
        param.setValueAtTime(56.136, 21, 0)
        param.setValueAtTime(0, 28, 0)
        param.setValueAtTime(0, 34, 0)
        param.setValueAtTime(16, 37, 0)
        param.setValueAtTime(0, 47, 0)
        param.setValueAtTime(0, 52, 0)
        param.setValueAtTime(800, 58, 0)
        param.setValueAtTime(0, 61, 0)
        param.setValueAtTime(977, 65, 0)
        param.setValueAtTime(-9, 122, 0)
        param.setValueAtTime(12, 179, 0)
        param.setValueAtTime(-413, 1, 1)
        param.setValueAtTime(-20, 7, 1)
        param.setValueAtTime(0, 11, 1)
        param.setValueAtTime(0, 14, 1)
        param.setValueAtTime(0, 20, 1)
        param.setValueAtTime(-52.3599, 21, 1)
        param.setValueAtTime(0, 28, 1)
        param.setValueAtTime(37.9614, 34, 1)
        param.setValueAtTime(39, 37, 1)
        param.setValueAtTime(0, 47, 1)
        param.setValueAtTime(0, 52, 1)
        param.setValueAtTime(0, 58, 1)
        param.setValueAtTime(0, 61, 1)
        param.setValueAtTime(98, 65, 1)
        param.setValueAtTime(-21.1301, 122, 1)
        param.setValueAtTime(-1, 179, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        options = param.getOptions()
        foundOption = False
        for i in range(len(options)):
            if options[i] == "Parzen":
                param.setValue(i)
                foundOption = True
                break
        if not foundOption:
            app.writeToScriptEditor("Could not set option for parameter filter of node Group1.Transform1")
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("directionalBlur")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("shutter")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("shutterCustomOffset")
    if param is not None:
        param.setValue(-0.009, 0)
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Source_layer_name")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("Output_layer_name")
    if param is not None:
        param.setVisible(False)
        del param

    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param

    del lastNode




    #Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("highDefUpstream")
    if param is not None:
        param.setVisible(False)
        del param


    #Create the user-parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createChoiceParam("type", "Shake Type")
    entries = [ ("None", ""),
    ("Quake", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue(1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.type = param
    del param

    param = lastNode.createIntParam("startFrame", "Start Frame")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.startFrame = param
    del param

    param = lastNode.createIntParam("endFrame", "End Frame")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.endFrame = param
    del param

    param = lastNode.createIntParam("translateStX", "Strength Translate X")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.translateStX = param
    del param

    param = lastNode.createIntParam("translateStY", "Strengh Translate Y")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.translateStY = param
    del param

    param = lastNode.createDoubleParam("scaleStX", "Strength Scale X")
    param.setMinimum(-2.14748e+09, 0)
    param.setMaximum(2.14748e+09, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.scaleStX = param
    del param

    param = lastNode.createDoubleParam("scaleStY", "Strengh Scale Y")
    param.setMinimum(-2.14748e+09, 0)
    param.setMaximum(2.14748e+09, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.scaleStY = param
    del param

    param = lastNode.createDoubleParam("rotateSt", "Strength Rotate")
    param.setMinimum(-2.14748e+09, 0)
    param.setMaximum(2.14748e+09, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(90, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rotateSt = param
    del param

    param = lastNode.createDoubleParam("Transform1motionBlur", "Motion Blur")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Quality of motion blur rendering. 0 disables motion blur, 1 is a good value. Increasing this slows down rendering.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Transform1motionBlur = param
    del param

    param = lastNode.createBooleanParam("Transform1directionalBlur", "Directional Blur Mode")

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("Motion blur is computed from the original image to the transformed image, each parameter being interpolated linearly. The motionBlur parameter must be set to a nonzero value, and the blackOutside parameter may have an important effect on the result.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Transform1directionalBlur = param
    del param

    param = lastNode.createDouble2DParam("Transform1center", "Center")
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(-10000, 0)
    param.setDisplayMaximum(10000, 0)
    param.setDefaultValue(0.5, 0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(-10000, 1)
    param.setDisplayMaximum(10000, 1)
    param.setDefaultValue(0.5, 1)

    #Add the param to the page
    lastNode.userNatron.addParam(param)

    #Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(960, 0)
    param.setValue(540, 1)
    lastNode.Transform1center = param
    del param

    #Refresh the GUI with the newly created parameters
    lastNode.refreshUserParamsGUI()
    del lastNode

    #Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupTransform1)

    groupTransform1.connectInput(0, groupInput1)
    param = groupTransform1.getParam("translate")
    param.setExpression("if thisGroup.type.get() == 0 or frame < thisGroup.startFrame.get() or frame > thisGroup.endFrame.get():\n\tret = 0\nelif dimension == 0 and thisGroup.type.get() == 1 :\n\tlowNum = - thisGroup.translateStX.get()\n\thighNum = thisGroup.translateStX.get()\n\ttheNum = randomInt(lowNum, highNum)\n\tret = theNum\nelif dimension == 1 and thisGroup.type.get() == 1 :\n\tlowNum = -thisGroup.translateStY.get()\n\thighNum = thisGroup.translateStY.get()\n\ttheNum = randomInt(lowNum, highNum)\n\tret = theNum\nelse:\t\n\tret = 0", True, 0)
    param.setExpression("if thisGroup.type.get() == 0 or frame < thisGroup.startFrame.get() or frame > thisGroup.endFrame.get():\n\tret = 0\nelif dimension == 0 and thisGroup.type.get() == 1 :\n\tlowNum = - thisGroup.translateStX.get()\n\thighNum = thisGroup.translateStX.get()\n\ttheNum = randomInt(lowNum, highNum)\n\tret = theNum\nelif dimension == 1 and thisGroup.type.get() == 1 :\n\tlowNum = -thisGroup.translateStY.get()\n\thighNum = thisGroup.translateStY.get()\n\ttheNum = randomInt(lowNum, highNum)\n\tret = theNum\nelse:\t\n\tret = 0", True, 1)
    del param
    param = groupTransform1.getParam("rotate")
    param.setExpression("if thisGroup.type.get() == 0 or frame < thisGroup.startFrame.get() or frame > thisGroup.endFrame.get():\n\tret = 0.0\nelif thisGroup.type.get() == 1 :\n\tlowNum = 0.0\n\thighNum = thisGroup.rotateSt.get()\n\ttheNum = random(lowNum, highNum)\n\tret = theNum\nelse:\n\t ret = 0.0", True, 0)
    del param
    param = groupTransform1.getParam("scale")
    param.setExpression("if thisGroup.type.get() == 0 or frame < thisGroup.startFrame.get() or frame > thisGroup.endFrame.get():\n\tret = 1\nelif dimension == 0 and thisGroup.type.get() == 1 :\n\tlowNum = 1.\n\thighNum = thisGroup.scaleStX.get()\n\ttheNum = random(lowNum, highNum)\n\tret = theNum\nelif dimension == 1 and thisGroup.type.get() == 1 :\n\tlowNum = 1.\n\thighNum = thisGroup.scaleStY.get()\n\ttheNum = random(lowNum, highNum)\n\tret = theNum\nelse:\n\t ret = 1", True, 0)
    param.setExpression("if thisGroup.type.get() == 0 or frame < thisGroup.startFrame.get() or frame > thisGroup.endFrame.get():\n\tret = 1\nelif dimension == 0 and thisGroup.type.get() == 1 :\n\tlowNum = 1.\n\thighNum = thisGroup.scaleStX.get()\n\ttheNum = random(lowNum, highNum)\n\tret = theNum\nelif dimension == 1 and thisGroup.type.get() == 1 :\n\tlowNum = 1.\n\thighNum = thisGroup.scaleStY.get()\n\ttheNum = random(lowNum, highNum)\n\tret = theNum\nelse:\n\t ret = 1", True, 1)
    del param
    param = groupTransform1.getParam("center")
    param.setExpression("thisGroup.Transform1center.get()[dimension]", False, 0)
    param.setExpression("thisGroup.Transform1center.get()[dimension]", False, 1)
    del param
    param = groupTransform1.getParam("motionBlur")
    param.setExpression("thisGroup.Transform1motionBlur.get()", False, 0)
    del param
    param = groupTransform1.getParam("directionalBlur")
    param.setExpression("thisGroup.Transform1directionalBlur.get()", False, 0)
    del param

    try:
        extModule = sys.modules["Shaker_NPGExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
